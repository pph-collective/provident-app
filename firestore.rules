rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function userInOrg(organization) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.organization == organization;
    }

    match /users/{user} {
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
      allow read: if request.auth != null && (request.auth.token.email == resource.data.email || request.auth.token.admin == true);
      allow create: if request.auth != null && request.auth.token.email == request.resource.data.email;

      match /form_responses/{form} {
        allow create: if request.auth != null && request.auth.token.email == user;
        allow update: if request.auth != null && request.auth.token.email == user && resource.data.status != 'Submitted';
        allow read: if request.auth != null && request.auth.token.email == user;
      }
    }

    match /activity_log/{document=**} {
      allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
      allow create: if true;
    }

    match /organizations/{organization} {
      allow read: if true;

      match /form_responses/{form} {
        allow create: if userInOrg(organization);
        allow update: if userInOrg(organization) && resource.data.status != 'Submitted';
        allow read: if userInOrg(organization);
      }
    }

    match /forms/{document=**} {
      allow read: if request.auth != null;
    }

    match /results/{document=**} {
      allow read: if request.auth != null;
    }
  }
}
